#!/usr/bin/env python3

# Reads the output from the chessgames program via stdin (optionally modified by intervening filters)
# and writes a breakdown on results for each opening

# 20210224 D.W.Robson Created

import sys

############################################
# Function to determine if string is a float
def isfloat(num):
    try:
        float(num)
        return True
    except ValueError:
        return False
############################################

whiteResults = {}
blackResults = {}
sumOppRating = 0
numOppRating = 0
sumMyRating = 0
numMyRating = 0
totPerformanceRating = 0
numPerformanceRating = 0
sumRatingChange = 0.0
wins = 0
defeats = 0
draws = 0
maxDate=0
minDate=99999999

for line in sys.stdin:
    result = line[34:38]
    colour = line[39:44]
    MyRating = line[45:49].strip()
    OppRating = line[50:54].strip()
    if not OppRating.isnumeric():
       OppRating= MyRating
    RatingChange = line[55:61].strip()
    opening = line[61:83]
    gameDate = int( line[0:10].replace('/','') )

    if gameDate > maxDate:
       maxDate = gameDate
       strMaxDate = line[0:10]
       
    if gameDate < minDate:
       minDate = gameDate
       strMinDate = line[0:10]
       
    sumMyRating += int(MyRating)
    numMyRating += 1
    sumOppRating += int(OppRating)
    numOppRating += 1

    if isfloat(RatingChange):
       sumRatingChange +=float( RatingChange )

    if result == "WON ":
       score = 1
       wins += 1
       performanceRating = int(OppRating) + 400
       totPerformanceRating += performanceRating
       numPerformanceRating += 1
    if result == "LOST":
       score = 0
       defeats += 1
       performanceRating = int(OppRating) - 400
       totPerformanceRating += performanceRating
       numPerformanceRating += 1
    if result == "DREW":
       score = 0.5
       draws += 1
       performanceRating = int(OppRating)
       totPerformanceRating += performanceRating
       numPerformanceRating += 1

    if colour == "WHITE":
       if opening not in whiteResults.keys():
          whiteResults[opening] = [ 1, score, 1, performanceRating ]
       else:
          prevCount, prevScore, prevNumPerformanceRating, prevPerformanceRating = whiteResults[opening]
          whiteResults[opening] = [ prevCount + 1, prevScore + score, prevNumPerformanceRating + 1, prevPerformanceRating + performanceRating ]

    if colour == "BLACK":
       if opening not in blackResults.keys():
          blackResults[opening] = [ 1, score, 1, performanceRating ]
       else:
          prevCount, prevScore, prevNumPerformanceRating, prevPerformanceRating = blackResults[opening]
          blackResults[opening] = [ prevCount + 1, prevScore + score, prevNumPerformanceRating + 1, prevPerformanceRating + performanceRating ]

if numOppRating > 0:
   print ( "\nFor games between %s and %s " % (strMinDate, strMaxDate) )
   print( "%d games: %d wins: %d draws: %d defeats" % (wins + draws + defeats, wins, draws, defeats) )
   print( "Average Ratings: Mine = %4d Opponents = %4d: Rating change = %3.1f: My Performance Rating = %4d" % \
         (sumMyRating/numMyRating,sumOppRating/numOppRating,sumRatingChange, totPerformanceRating/numPerformanceRating) )

# Report on White Openings

sumCount = sumScore = sumPerf = sumPerfCount = 0
for opening in whiteResults.keys():
    count, score, numPerf, totPerf  = whiteResults[opening]
    sumCount += count
    sumScore += score
    sumPerfCount += numPerf
    sumPerf += totPerf
if sumCount > 0:
    print("\nWhite Results          %3d%%    (%4.1f out of %2d) Perf. Rating = %d\n" % \
          (int(100*sumScore/sumCount), sumScore, sumCount, sumPerf/sumPerfCount))
for opening in whiteResults.keys():
    count, score, numPerf, totPerf  = whiteResults[opening]
    print("%20s %3d%%    (%4.1f out of %2d) Perf. Rating = %d" % (opening, int(100*score/count), score, count, totPerf/numPerf,))

# Report on Black Openings

sumCount = sumScore = sumPerf = sumPerfCount = 0
for opening in blackResults.keys():
    count, score, numPerf, totPerf  = blackResults[opening]
    sumCount += count
    sumScore += score
    sumPerfCount += numPerf
    sumPerf += totPerf
if sumCount > 0:
    print("\nBlack Results          %3d%%    (%4.1f out of %2d) Perf. Rating = %d\n" % \
          (int(100*sumScore/sumCount), sumScore, sumCount, sumPerf/sumPerfCount))
for opening in blackResults.keys():
    count, score, numPerf, totPerf  = blackResults[opening]
    print("%20s %3d%%    (%4.1f out of %2d) Perf. Rating = %d" % (opening, int(100*score/count), score, count, totPerf/numPerf,))

