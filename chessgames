#!/usr/bin/python3

import os
import re

def convert3to4 ( rating ):

    if rating.isnumeric():
       if int(rating) < 300:
          return str(int(( (int(rating) * 7.5) + 700)))
    return str( rating )

def ECFchange( myRating, playerRating, result ):

    RatingDiff = int(playerRating)  - int(myRating)
    if ( RatingDiff < 0.0 ):
       sign = -1.0
    else:
       sign = 1.0
    absRatingDiff = abs(RatingDiff)

    if result == "WON":
       resultContribution = 10.0
    elif result == "DREW":
       resultContribution = 0.0
    elif result == "LOST":
       resultContribution = -10.0

    if absRatingDiff <= 3:
       return resultContribution + sign * 0.0
    if absRatingDiff <= 10:
       return resultContribution + sign * 0.2
    if absRatingDiff <= 17:
       return resultContribution + sign * 0.4
    if absRatingDiff <= 25:
       return resultContribution + sign * 0.6
    if absRatingDiff <= 32:
       return resultContribution + sign * 0.8
    if absRatingDiff <= 39:
       return resultContribution + sign * 1.0
    if absRatingDiff <= 46:
       return resultContribution + sign * 1.2
    if absRatingDiff <= 53:
       return resultContribution + sign * 1.4
    if absRatingDiff <= 61:
       return resultContribution + sign * 1.6
    if absRatingDiff <= 68:
       return resultContribution + sign * 1.8
    if absRatingDiff <= 76:
       return resultContribution + sign * 2.0
    if absRatingDiff <= 83:
       return resultContribution + sign * 2.2
    if absRatingDiff <= 91:
       return resultContribution + sign * 2.4
    if absRatingDiff <= 98:
       return resultContribution + sign * 2.6
    if absRatingDiff <= 106:
       return resultContribution + sign * 2.8
    if absRatingDiff <= 113:
       return resultContribution + sign * 3.0
    if absRatingDiff <= 121:
       return resultContribution + sign * 3.2
    if absRatingDiff <= 129:
       return resultContribution + sign * 3.4
    if absRatingDiff <= 137:
       return resultContribution + sign * 3.6
    if absRatingDiff <= 145:
       return resultContribution + sign * 3.8
    if absRatingDiff <= 153:
       return resultContribution + sign * 4.0
    if absRatingDiff <= 162:
       return resultContribution + sign * 4.2
    if absRatingDiff <= 170:
       return resultContribution + sign * 4.4
    if absRatingDiff <= 179:
       return resultContribution + sign * 4.6
    if absRatingDiff <= 188:
       return resultContribution + sign * 4.8
    if absRatingDiff <= 197:
       return resultContribution + sign * 5.0
    if absRatingDiff <= 206:
       return resultContribution + sign * 5.2
    if absRatingDiff <= 215:
       return resultContribution + sign * 5.4
    if absRatingDiff <= 225:
       return resultContribution + sign * 5.6
    if absRatingDiff <= 235:
       return resultContribution + sign * 5.8
    if absRatingDiff <= 245:
       return resultContribution + sign * 6.0
    if absRatingDiff <= 256:
       return resultContribution + sign * 6.2
    if absRatingDiff <= 267:
       return resultContribution + sign * 6.4
    if absRatingDiff <= 278:
       return resultContribution + sign * 6.6
    if absRatingDiff <= 289:
       return resultContribution + sign * 6.8
    if absRatingDiff <= 302:
       return resultContribution + sign * 7.0
    if absRatingDiff <= 315:
       return resultContribution + sign * 7.2
    if absRatingDiff <= 328:
       return resultContribution + sign * 7.4
    if absRatingDiff <= 344:
       return resultContribution + sign * 7.6
    if absRatingDiff <= 357:
       return resultContribution + sign * 7.8
    if absRatingDiff <= 374:
       return resultContribution + sign * 8.0
    if absRatingDiff <= 391:
       return resultContribution + sign * 8.2
    return resultContribution + sign * 8.4

# Some initialization
me    = "David Robson"
count = 0
date = opponent = result = colour = myRating = platerRating = \
       whiteECF = blackECF = "?"
ratingIncrease = opening = variation = " "

# Use standard, not python SIGPIPE action as the former produces spurious errors when results piped to head(1)
from signal import signal, SIGPIPE, SIG_DFL
signal(SIGPIPE,SIG_DFL)

# Read the pgn file
myGames = os.getenv('MYGAMES')
file1 = open(myGames, 'r')
Lines = file1.readlines()

# Strips the newline character
for line in Lines:

    if re.match(r"^\[ *Date .*", line):
        date = line.split('"')[1];

    if re.match(r"^\[ *WhiteECF .*", line):
        whiteECF = line.split('"')[1];

    if re.match(r"^\[ *BlackECF .*", line):
        blackECF = line.split('"')[1];

    if re.match(r"^\[ *Result .*", line):
        result = line.split('"')[1];

    if re.match(r"^\[ *Opening .*", line):
        opening = line.split('"')[1];

    if re.match(r"^\[ *Variation.*", line):
        variation = line.split('"')[1];

    if re.match(r"^\[ *White .*", line):
        player = line.split('"')[1];
        if player != me:
           opponent = player;
           colour = "BLACK";

    if re.match(r"^\[ *Black .*", line):
        player = line.split('"')[1];
        if player != me:
           opponent = player;
           colour = "WHITE";

    if re.match(r"^ *1\. *[a-zA-Z].*", line):
        if colour == "WHITE":
           playerRating = blackECF
           myRating = whiteECF
        if colour == "BLACK":
           playerRating = whiteECF
           myRating = blackECF
        if result == "1/2-1/2":
           result = "DREW"
        if result == "1-0" and colour == "WHITE":
           result = "WON"
        if result == "1-0" and colour == "BLACK":
           result = "LOST"
        if result == "0-1" and colour == "WHITE":
           result = "LOST"
        if result == "0-1" and colour == "BLACK":
           result = "WON"

# Convert 3 digit ratings to 4 digit ratings

        myRating = convert3to4 ( myRating )
        playerRating = convert3to4 ( playerRating )
 
# Separate open sicilians from anti-sicilians when I'm playing black

        if colour == "BLACK" and opening == "Sicilian" and variation != "Najdorf" and variation != "Dragon":
           opening = "Anti-Sicilian"

        if (myRating.isnumeric() and playerRating.isnumeric()):
              ratingIncrease = round(ECFchange( myRating, playerRating, result),1)
              
        print(date,opponent.replace(' ','_').ljust(22),result.ljust(4),colour,myRating.rjust(4),\
               playerRating.rjust(4),str(ratingIncrease).rjust(5),opening.ljust(22),variation)

# Reinitialize variables for next line

        date = opponent = result = colour = myRating = platerRating = \
               whiteECF = blackECF = "?"
        ratingIncrease = opening = variation = " "

file1.close()
